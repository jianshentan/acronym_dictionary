var Bot = require('./bot')
  , config1 = require('../config1')
  , fs = require('fs');

var bot = new Bot(config1);

var counter = 0;
var wordLink = {};
var wordCount = {};

// start bot!
console.log("Acronym Dictionary is pumpin'.");
fs.appendFile("acronym_dictionary_log", "Acronym Dictionary is pumpin'.");

uploadFile();
setInterval(function() {
    bot.twit.get('followers/ids', function(err, reply) {
        if (err) return handleError(err);
        //console.log('\n# followers:' + reply.ids.length.toString());
    });

    counter++;
    var acronym = getAcronym();
    //postTweet(getAcronym());
    console.log(acronym.toUpperCase() + " - " + postTweet(acronym) + " \n#" + acronym.toUpperCase());

    var rand = Math.random();
    if (rand <= 0.10) {
        var acronym = getAcronym();
        var tweet = acronym.toUpperCase() + " - " + postTweet(acronym) + " \n#" + acronym.toUpperCase();

        bot.tweet(tweet, function(err, reply) {
            if (err) return handleError(err);
            console.log('\nTweet: ' + (reply ? reply.text : reply));
        });
    } else if (rand <= 0.75 && rand > 0.10) {
        bot.mingle(function(err, reply) {
            if (err) return handleError(err);
            var name = reply.screen_name;
            console.log('\nMingle: followed @' + name);
            fs.appendFile("acronym_dictionary_log", '\nMingle: followed @' + name);
        });
    } else {
        bot.prune(function(err, reply) {
            if (err) return handleError(err);
            var name = reply.screen_name;
            console.log('\nPrune: unfollowed @' + name);
            fs.appendFile("acronym_dictionary_log", '\nPrune: unfollowed @' + name);
        });
    }
}, 9000);

function uploadFile() {
    var content = fs.readFileSync('source', 'utf8');
    var words = content.replace(/\n/g, " ").match(/[^ ]+/g);

    console.log(words.length);
    for (var i=0; i<words.length; i++) {
        var cword = words[i];
        var tword = trim(words[i]).toLowerCase();
        if (tword.length <= 0) continue;

        if (cword.charAt(cword.length-1) == '.' ||
            cword.charAt(cword.length-1) == ';' ||
            cword.charAt(cword.length-1) == '!' ||
            cword.charAt(cword.length-1) == ':' ||
            cword.charAt(cword.length-1) == '?' ||
            i == words.length - 1) {
            // add to wordCount
            if (tword in wordCount)
                wordCount[tword] = wordCount[tword] + 1;
            else
                wordCount[tword] = 1;
        } else {
            // add to wordLink
            if (tword in wordLink) {
                var flag = false;
                for (var j=0; j<wordLink[tword].length; j++)
                    if (wordLink[tword][j] == trim(words[i+1])) 
                        flag = true;
                if (flag == false) 
                    wordLink[tword].push(trim(words[i+1]).toLowerCase());
            } else {
                wordLink[tword] = [];
                wordLink[tword].push(trim(words[i+1]).toLowerCase());
            }

            // add to wordCount
            if (tword in wordCount)
                wordCount[tword] = wordCount[tword] + 1;
            else
                wordCount[tword] = 1;
        }
    }

    console.log("wordlink length: " +Object.keys(wordLink).length);
    fs.appendFile("acronym_dictionary_log", "wordlink length: " +Object.keys(wordLink).length);
    console.log("wordcount length: " +Object.keys(wordCount).length);
    fs.appendFile("acronym_dictionary_log", "wordcount length: " +Object.keys(wordCount).length);
};

/* Returns an acronym in the format: 'XYZ' */
function getAcronym() {
    var data = fs.readFileSync('fresh_acronyms', 'utf8');

    if (data.split(" ").length <= 0) {
        console.log("the fresh_acronym file is empty");
        fs.appendFile("acronym_dictionary_log", "the fresh_acronym file is empty");
    }

    var acronyms = data.split(" ");
    var acronym = acronyms[0];

    var newFileData = "";
    for (var i=1; i<acronyms.length; i++) {
        var space = " ";
        if (i == 1) { space = ""; }
        newFileData = newFileData + space + acronyms[i];
    }

    fs.writeFileSync('fresh_acronyms', newFileData);
    fs.appendFile('expired_acronyms', acronym + " ");

    return acronym;
};

/* Takes in an acronym in the format: 'XYZ' */
function postTweet(acronym) {

    if (acronym.length <= 0) {
        console.log("no acronyms left in the fresh_acronym file");
        fs.appendFile("markov_log", "no acronyms left in the fresh_acronym file");
        fs.appendFile("acronym_dictionary_log", "no acronyms left in the fresh_acronym file");
        return;
    }

    var prevWord = null;
    var finalWords = [];

    console.log("ACRONYM: " + acronym);
    fs.appendFile("markov_log", "ACRONYM: " + acronym);

    for (var i=0; i<acronym.length; i++) {
        var letter = acronym.charAt(i);
        var wordOptions = [];
        if (prevWord == null) {
            for (word in wordLink) 
                if (word[0] == letter && !isDeadWord(word))
                    for (var j=0; j<redistributeCount(word,wordCount[word]); j++) 
                        wordOptions.push(word); 
            
            printWordOptions("first", letter, wordLink[prevWord]);
        } else {
            if (prevWord in wordLink) {
                var hasLetter = false;
                var deadWord = false;
                var deadLastWord = false;
                for (var j=0; j<wordLink[prevWord].length; j++) {
                    var kword = wordLink[prevWord][j];
                    if (kword[0] == letter) {
                        
                        // check not using words in the deadWords list
                        if (isDeadWord(kword))
                            deadWord = true;

                        // if last letter, check not using words in the deadLastWord list
                        if (i == acronym.length - 1)
                            if (isDeadLastWord(kword))
                                deadLastWord = true;

                        if (deadWord == false && deadLastWord == false) {
                            hasLetter = true;
                            for (var k=0; k<redistributeCount(kword, wordCount[kword]); k++)
                                wordOptions.push(kword);
                        }
                    } 
                }
                if (hasLetter == false) {
                    for (word in wordLink)
                        if (word[0] == letter) {
                            var flag = (i == acronym.length - 1) ? 
                                !isDeadLastWord(word) && !isDeadWord(word) : !isDeadWord(word);
                            if (flag)
                                for (var j=0; j<redistributeCount(word, wordCount[word]); j++) 
                                    wordOptions.push(word); 
                        }
                    printWordOptions("fail", letter, wordLink[prevWord]);
                } else {
                    printWordOptions("success", letter, wordLink[prevWord]);
                }
            } else {
                for (word in wordLink)
                    if (word[0] == letter) {
                        var flag = (i == acronym.length - 1) ? 
                            !isDeadLastWord(word) && !isDeadWord(word) : !isDeadWord(word);
                        if (flag)
                            for (var j=0; j<redistributeCount(word,wordCount[word]); j++) 
                                wordOptions.push(word); 
                    }
                printWordOptions("empty", letter, wordLink[prevWord]);
            }
        }
        var randWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];
        finalWords.push(randWord);
        prevWord = randWord;
    }
    console.log(format(finalWords));
    return format(finalWords);
}

function format(words) {
    var ret = "";
    for (var i in words) {
        if (words[i] != null) {
            var word = words[i].charAt(0).toUpperCase() + words[i].slice(1);
            ret += word + " ";
        }
    }
    return ret;
};

function redistributeCount(word, count) {
    var max = count;
    if (word.length > 4) 
        max = max*2;
    else if (word.length > 6)
        max = max*3;
    else if (word.length > 8)
        max = max*4;
    return max;
};

function isDeadLastWord(word) {
    var deadLastWords = ["all", "from", "is", "to", "came", "went", "he", "she", "in", "that", "but", "to", "then", "dont", "do", "did", "didnt", "cant", "wont", "on", "for", "i", "im", "id", "your", "my", "was", "of", "and", "the", "a", "or", "if", "at", "as", "are", "so", "an"];
    for (var k=0; k<deadLastWords.length; k++)
        if (deadLastWords[k] == word)
            return true;
    return false;
};

function isDeadWord(word) {
    var deadWords = ["an", "a", "i", "ah", "it"];
    for (var k=0; k<deadWords.length; k++)
        if (deadWords[k] == word)
            return true;
    return false;
};

function printWordOptions(text, letter, options) {
    var msg = "";
    if (text == "first" || text == "empty") {
        msg = text+" - letter: "+letter;
        console.log(msg);
        fs.appendFile("markov_log", msg);
    } else {
        if (options.length > 7) {
            msg = text+" - letter: "+letter+" | options: " + options.slice(0, 7) + "...";
            console.log(msg);
            fs.appendFile("markov_log", msg);
        } else {
            msg = text+" - letter: "+letter+" | options: " + options; 
            console.log(msg);
            fs.appendFile("markov_log", msg);
        }
    }
};

function handleError(err) {
    console.error('response status: ', err.statusCode);
    fs.appendFile("acronym_dictionary_log", 'response status: ' + err.statusCode);
    console.error('data: ', err.data);
    fs.appendFile("acronym_dictionary_log", 'data: ' + err.data);
};

function trim(word) {
    return word.replace(/[^\w]/gi,'');
};
