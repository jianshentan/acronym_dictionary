var Bot = require('./bot')
  , config1 = require('../config1')
  , fs = require('fs');

var bot = new Bot(config1);

var counter = 0;
var wordLink = {};
var wordCount = {};

// start bot!
console.log("Acronym Dictionary is pumpin'.");
uploadFile();
setInterval(function() {
    bot.twit.get('followers/ids', function(err, reply) {
        if (err) return handleError(err);
        //console.log('\n# followers:' + reply.ids.length.toString());
    });

    postTweet(getAcronym());
    counter++;
    var rand = 0.01; //Math.random();
    if (rand <= 0.10) {
        //postTweet(getAcronym());
        /*
        var popular = "Hello World" + counter.toString();
        bot.tweet(popular, function(err, reply) {
            if (err) return handleError(err);
            console.log('\nTweet: ' + (reply ? reply.text : reply));
        });
        */
    } else if (rand <= 0.55 && rand > 0.10) {
        bot.mingle(function(err, reply) {
            if (err) return handleError(err);
            var name = reply.screen_name;
            console.log('\nMingle: followed @' + name);
        });
    } else {
        bot.prune(function(err, reply) {
            if (err) return handleError(err);
            var name = reply.screen_name;
            console.log('\nPrune: unfollowed @' + name);
        });
    }
}, 9000);

function uploadFile() {
    var content = fs.readFileSync('source', 'utf8');
    var words = content.replace(/\n/g, " ").match(/[^ ]+/g);

    console.log(words.length);
    for (var i=0; i<words.length; i++) {
        var cword = words[i];
        var tword = trim(words[i]).toLowerCase();
        if (tword.length <= 0) continue;

        if (cword.charAt(cword.length-1) == '.' ||
            cword.charAt(cword.length-1) == ';' ||
            cword.charAt(cword.length-1) == '!' ||
            cword.charAt(cword.length-1) == ':' ||
            cword.charAt(cword.length-1) == '?' ||
            i == words.length - 1) {
            // add to wordCount
            if (tword in wordCount)
                wordCount[tword] = wordCount[tword] + 1;
            else
                wordCount[tword] = 1;
        } else {
            // add to wordLink
            if (tword in wordLink) {
                var flag = false;
                for (var j=0; j<wordLink[tword].length; j++)
                    if (wordLink[tword][j] == trim(words[i+1])) 
                        flag = true;
                if (flag == false) 
                    wordLink[tword].push(trim(words[i+1]).toLowerCase());
            } else {
                wordLink[tword] = [];
                wordLink[tword].push(trim(words[i+1]).toLowerCase());
            }

            // add to wordCount
            if (tword in wordCount)
                wordCount[tword] = wordCount[tword] + 1;
            else
                wordCount[tword] = 1;
        }
    }

    console.log("wordlink length: " +Object.keys(wordLink).length);
    console.log("wordcount length: " +Object.keys(wordCount).length);
};

/* Returns an acronym in the format: 'XYZ' */
function getAcronym() {
    var data = fs.readFileSync('fresh_acronyms', 'utf8');

    if (data.split(" ").length <= 0)
        console.log("the fresh_acronym file is empty");

    var acronyms = data.split(" ");
    var acronym = acronyms[0];

    var newFileData = "";
    for (var i=1; i<acronyms.length; i++) {
        var space = " ";
        if (i == 1) { space = ""; }
        newFileData = newFileData + space + acronyms[i];
    }

    fs.writeFileSync('fresh_acronyms', newFileData);
    fs.appendFile('expired_acronyms', acronym + " ");

    return acronym;
};

/* Takes in an acronym in the format: 'XYZ' */
function postTweet(acronym) {
    var deadWords = ['a', 'the', 'i'];
    var deadLastWords = ['of', 'and', 'the', 'a', 'or', 'if', 'at'];

    if (acronym.length <= 0) {
        console.log("no acronyms left in the fresh_acronym file");
        return;
    }

    var prevWord = null;
    var finalWords = [];

    console.log("ACRONYM: " + acronym);
    for (var i=0; i<acronym.length; i++) {
        var letter = acronym.charAt(i);
        var wordOptions = [];
        if (prevWord == null) {
            for (word in wordLink) 
                if (word[0] == letter)
                    for (var j=0; j<wordCount[word]; j++) 
                        wordOptions.push(word); 
            
            printWordOptions("first", letter, wordLink[prevWord]);
        } else {
            //if (wordLink[prevWord].length == 0) {
            if (prevWord in wordLink) {
                var hasLetter = false;
                var deadWord = false;
                var deadLastWord = false;
                for (var j=0; j<wordLink[prevWord].length; j++) {
                    var kword = wordLink[prevWord][j];
                    console.log("kword: " + kword);
                    // check that we're not using words in the deadWords list
                    for (var k=0; k<deadWords.length; k++)
                        if (kword == deadWords[k]) {
                            console.log("word fail:" + kword);
                            deadWord = true;
                        }

                    // if last letter, check that we're not using words in the deadLastWord list
                    if (i == acronym.length-1)
                        for (var k=0; k<deadLastWords.length; k++) 
                            if (kword == deadLastWords[k]) {
                                console.log("last word fail:" + kword);
                                deadLastWord = true;
                            }

                    if (kword[0] == letter && deadWord == false && deadLastWord == false) {
                        hasLetter = true;
                        for (var k=0; k<wordCount[kword]; k++) 
                            wordOptions.push(kword);
                    } 
                }
                if (hasLetter == false) {
                    for (word in wordLink)
                        if (word[0] == letter)
                            for (var j=0; j<wordCount[word]; j++) 
                                wordOptions.push(word); 
                    printWordOptions("fail", letter, wordLink[prevWord]);
                } else {
                    printWordOptions("success", letter, wordLink[prevWord]);
                }
            } else {
                for (word in wordLink)
                    if (word[0] == letter)
                        for (var j=0; j<wordCount[word]; j++) 
                            wordOptions.push(word); 
                printWordOptions("empty", letter, wordLink[prevWord]);
            }
        }
        var randWord = wordOptions[Math.floor(Math.random() * wordOptions.length)];
        finalWords.push(randWord);
        prevWord = randWord;
    }
    console.log(finalWords);
};

function printWordOptions(text, letter, options) {
    if (text == "first" || text == "empty") {
        console.log(text+" - letter: "+letter);
    } else {
        if (options.length > 7) {
            console.log(text+" - letter: "+letter+" | options: " + options.slice(0, 7) + "...");
        } else {
            console.log(text+" - letter: "+letter+" | options: " + options);
        }
    }
};


function handleError(err) {
    console.error('response status: ', err.statusCode);
    console.error('data: ', err.data);
};

function trim(word) {
    return word.replace(/[^\w]/gi,'');
    //return word.replace(/\b[-.,()&$#!\[\]{}"']+\B|\B[-.,()&$#!\[\]{}"']+\b/g, "").replace(/\s+/g,' ')
};
